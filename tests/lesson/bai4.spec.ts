import { test, expect } from '@playwright/test';

const DEMO_URL = 'https://demoapp-sable-gamma.vercel.app/';

//C·∫•p 1: M·ªánh l·ªánh c·ªßa s·∫øp

test('C·∫•p 1: M·ªánh l·ªánh c·ªßa s·∫øp', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.locator("//span[contains(text(),'B·∫Øt ƒë·∫ßu Test')]").click();

    const slowButton1 = page.locator('#button-1');

    //L·ªói timeout 5000ms

    await slowButton1.click({ timeout: 5000 });
});

//C·∫•p 2: Gi·ªõi h·∫°n c·ªßa ph√≤ng ban

test('C·∫•p 2: Gi·ªõi h·∫°n c·ªßa ph√≤ng ban', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.locator("//span[contains(text(),'B·∫Øt ƒë·∫ßu Test')]").click();

    const slowButton2 = page.locator('#button-2');

    //L·ªói timeout 10000ms

    await slowButton2.click();
});

test('C·∫•p 3: Gi·ªõi h·∫°n c√¥ng ty', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.locator("//span[contains(text(),'B·∫Øt ƒë·∫ßu Test')]").click();

    const startBtn = page.locator('#start-btn');

    const continueBtn = page.locator('#continue-btn');

    const expectedBtn = page.locator('#final-btn');

    //action timeout 10 s m√† ti·∫øn tr√¨nh c√≥ 8s th√¨ tho·∫£i m√°i => 8s

    await startBtn.click();

    // 8s < 10s th·ªèa m√£n  => 8s

    await continueBtn.click();

    // t·ªïng ph·∫£i ch·ªù l√† 16s

    //b√°o l·ªói timeout 15s

    await expectedBtn.click();
});

//Tc ch·∫°y pass khi set l·∫°i timeout to√†n c·ª•c

test('Set l·∫°i timeout', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.locator("//span[contains(text(),'B·∫Øt ƒë·∫ßu Test')]").click();

    const startBtn = page.locator('#start-btn');

    const continueBtn = page.locator('#continue-btn');

    const expectedBtn = page.locator('#final-btn');

    //action timeout 10 s m√† ti·∫øn tr√¨nh c√≥ 8s th√¨ tho·∫£i m√°i => 8s

    await startBtn.click();

    // 8s < 10s th·ªèa m√£n  => 8s

    await continueBtn.click();

    // t·ªïng ph·∫£i ch·ªù l√† 16s

    //b√°o l·ªói timeout 15s

    await expectedBtn.click();
});

test('C·∫•p 1: Webfirst assertion', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'Web-First Assertions' }).click();

    await page.getByText('B·∫Øt ƒë·∫ßu ch·ªù').click();

    const statusMessage = page.locator('#status-message');

    //th·∫±ng PW s·∫Ω c∆° ch·∫ø retry ƒë·ªÉ ƒë·∫£m b·∫£o l√† sau x gi√¢y locator s·∫Ω ƒëc expect nh∆∞u mong mu·ªën. n·∫øu ko th√¨ s·∫Ω vƒÉng timeout

    await expect(statusMessage).toHaveText('T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!', {
        timeout: 5000,
    });
});

test('C·∫•p 2: Webfirst assertion', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'Web-First Assertions' }).click();

    await page.getByText('B·∫Øt ƒë·∫ßu ch·ªù').click();

    const statusMessage = page.locator('#status-message');

    //th·∫±ng PW s·∫Ω c∆° ch·∫ø retry ƒë·ªÉ ƒë·∫£m b·∫£o l√† sau x gi√¢y locator s·∫Ω ƒëc expect nh∆∞u mong mu·ªën. n·∫øu ko th√¨ s·∫Ω vƒÉng timeout

    await expect(statusMessage).toHaveText('T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!');
});

test('Webfirst assertion passed', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'Web-First Assertions' }).click();

    await page.getByText('B·∫Øt ƒë·∫ßu ch·ªù').click();

    const statusMessage = page.locator('#status-message');

    //th·∫±ng PW s·∫Ω c∆° ch·∫ø retry ƒë·ªÉ ƒë·∫£m b·∫£o l√† sau x gi√¢y locator s·∫Ω ƒëc expect nh∆∞u mong mu·ªën. n·∫øu ko th√¨ s·∫Ω vƒÉng timeout

    await expect(statusMessage).toHaveText('T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!', {
        timeout: 8000,
    });
});

//export button

///  ·ªû trong PW c√≥ 3 c·∫•p ƒë·ªô ƒë·ªÉ ki·ªÉm so√°t timeOut

// 1/ C·∫•p ƒë·ªô cao nh·∫•t Inline TimeOut (M·ªánh l·ªánh c·ªßa s·∫øp)

//2 C·∫•p ƒë·ªô 2: Trung b√¨nh = actionTimeOut => Quy ƒë·ªãnh c·ªßa ph√≤ng ban

//3 C·∫•p ƒë·ªô 3: Th·∫•p nh·∫•t => to√†n c·ª•c -> quy ƒë·ªãnh c·ªßa c√¥ng ty

//timeout to√†n c·ª•c

//m·∫∑c ƒë·ªãnh s·∫Ω l√† 30s cho timeout to√†n c·ª•c v√† 30s cho action timeout

// üöÄ Web-First Assertions

//C√≥ 2 c·∫•p ƒë·ªô

//c·∫•p ƒë·ªô 1; Cao nh·∫•t -> inline timeout => m·ªánh l·ªánh t·ªëi cao

//c·∫•p ƒë·ªô 2: to√†n c·ª•c - quy ƒë·ªãnh chung (default l√† 5s)

//toBeAttached

// ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i trong DOM hay kh√¥ng. n√≥ ko quan t√¢m cso hi·ªÉn th·ªã tr√™n m√† h√¨nh hay ko

test('toBeAttached', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-attach').click();

    //ƒë·ª£i 5s ƒë·ªÉ ph·∫ßn t·ª≠ ƒëc g·∫Øn v√†o DOM

    await expect(page.locator('#attached-node')).toBeAttached();
});

//toBeVisible

// Ki·ªÉm tra ph·∫ßn t·ª≠ v·ª´a t·ªìn t·∫°i trong DOM v√† v·ª´a ƒëang hi·ªÉn th·ªã tr√™n m√†n h√¨nh

// (n√≥ ko c√≥ display: none. visibility: hidden , c√≥ k√≠ch th∆∞·ªõc, chi·ªÅu r·ªông chi·ªÅu cao > 0, ko b·ªã che khu·∫•t b·ªüi ph·∫ßn t·ª≠ kh√°c...)

test('toBeVisible', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.pause();

    //·∫©n dialog

    await page.locator('#btn-hide').click();

    await page.locator('#btn-show').click();

    //ƒë·ª£i 5s ƒë·ªÉ ph·∫ßn t·ª≠ ƒëc g·∫Øn v√†o DOM

    await expect(page.locator('#visibility-target')).toBeVisible();
});

//toBeHidden

// l√† ph·ªß ƒë·ªãnh c·ªßa visible -> check ko c√≥ trong DOM ho·∫∑c b·ªã ·∫©n.

test('toBeHidden', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.pause();

    //·∫©n dialog

    await page.locator('#btn-hide-for-hidden').click();

    //ƒë·ª£i 5s ƒë·ªÉ ph·∫ßn t·ª≠ ƒëc g·∫Øn v√†o DOM

    await expect(page.locator('#hidden-target')).toBeHidden();
});

//toBeChecked

// Ki·ªÉm tra ph·∫ßn t·ª≠ c√≥ ·ªü tr·∫°ng th√°i ƒë∆∞·ª£c ch·ªçn/k√≠ch ho·∫°t hay ko

test('toBeChecked v·ªõi getAttribute', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.pause();

    //·∫©n dialog

    await page.locator('#tab-option').click();

    const trangThai = await page.locator('#tab-option').getAttribute('aria-selected');

    console.log(trangThai);

    await page.pause();

    //ƒë·ª£i 5s ƒë·ªÉ ph·∫ßn t·ª≠ ƒëc g·∫Øn v√†o DOM

    //   await expect(page.locator('#tab-option')).toBeChecked();
});

test('toBeChecked2', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.pause();

    //·∫©n dialog

    await page.locator('#news-check').click();

    await expect(page.locator('#news-check')).toBeChecked();
});

//toBeDisabled

// Check ph·∫ßn t·ª≠ b·ªã v√¥ hi·ªáu h√≥a

test('toBeDisabled', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.pause();

    //·∫©n dialog

    await page.locator('#toggle-disabled').click();

    await expect(page.locator('#email')).toBeDisabled();
});

//toBeEnabled

// Ph·∫ßn t·ª≠ kh√¥ng b·ªã v√¥ hi·ªáu h√≥a v√† c√≥ th·ªÉ t∆∞∆°ng t√°c ƒë∆∞·ª£c ph·ªß ƒë·ªãnh c·ªßa disabled

test('toBeEnabled', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await expect(page.locator('#enabled-input')).toBeEnabled();
});

//toBeEditable

// KI·ªÉm tra ph·∫ßn t·ª≠ c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c n·ªôi dung nh·∫≠p li·ªáu hay ko. ko b·ªã disabled v√† ko c√≥ thu·ªôc t√≠nh read only

test('toBeEditable', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await expect(page.locator('#editable')).toBeEditable();
});

//toBeEmpty

// s·∫Ω check ph·∫ßn t·ª≠ kh√¥ng ch·ª©a b·∫•t k√¨ ph·∫ßn t·ª≠ con n√†o, ho·∫∑c ko c√≥ n·ªôi dung text()

test('toBeEmpty', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-clear').click();

    await expect(page.locator('#empty-box')).toBeEmpty();
});

//toHaveCount

// s·∫Ω check c√≥ ch·ª©a ch√≠nh x√°c bn ph·∫ßn t·ª≠

test('toHaveCount', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await expect(page.locator('#items li')).toHaveCount(2);
});

//toContainText

//ki·ªÉm tra n·ªôi dung text c·ªßa ph·∫ßn t·ª≠. ko ph√¢n bi·ªát hoa th∆∞·ªùng . v√† t·ª± chu·∫©n h√≥a kho·∫£ng kho·∫£ng tr·∫Øng

test('toContainText', async ({ page }) => {
    await page.goto('http://localhost:5173/');

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-set-whitespace').click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#text-container')).toContainText('Playwright, welcome here');
});

//toBeFocused

// check focus vao input con tro chuot nh·∫•p nh√°y

test('toBeFocused', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-focus').click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#focusable')).toBeFocused();
});

//toHaveValue

// check thu·ªôc t√≠nh value c·ªßa th·∫ª input/ho·∫∑c texaerea

test('toHaveValue', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.getByText('Set Value', { exact: true }).click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#value-input')).toHaveValue('Hello World');
});

//toHaveValues

// check gi√° tr·ªã hi·ªán t·∫°i c·ªßa 1 th·∫ª select multiple c√≥ bao nhi√™u ph·∫ßn t·ª≠ array

test('toHaveValues', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.getByText('Set Values', { exact: true }).click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#multi-select')).toHaveValues(['Action', 'Drama']);
});

//toHaveClass. toContainClass, tohaveCss

//

test('toHaveClass', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-toggle-exact-class').click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#exact-class-target')).toHaveClass('highlight');
});

test('toHaveClass 2', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-toggle-class').click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#class-target')).toHaveClass('highlight');
});

//toHaveAttribute
test('toHaveAttribute', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await page.locator('#btn-toggle-attr').click();

    //   await expect(page.locator('#text-container')).toContainText('john');

    await expect(page.locator('#avatar')).toHaveAttribute('alt', 'User Avatar');
});

//toHaveId
test('toHaveId', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();

    await expect(page.locator('#unique-id')).toHaveId('unique-id');
});

//toBeInViewport
test('toBeInViewport', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();
    await page.locator('#viewport-target').scrollIntoViewIfNeeded();

    await expect(page.locator('#viewport-target')).toBeInViewport();
    await expect(page.locator('#viewport-target')).toBeVisible();
});

//toHaveText
test('toHaveText', async ({ page }) => {
    await page.goto(DEMO_URL);

    await page.getByRole('link', { name: 'B√†i 1: Auto-Wait Demo' }).click();

    await page.getByRole('button', { name: 'expect() c√≥ await' }).click();
    await page.locator('#btn-whitespace-text').click();
    const expectedMessage = page.locator('#status-text');
    await expect(expectedMessage).toContainText('Data loaded successfully!');
});